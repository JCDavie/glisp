(defn set-id [id elm]
  (if (element? elm)
    (replace-nth elm 0 (keyword (str (name (first elm)) "#" id)))))

(defn get-id [elm]
  (if (element? elm)
    (let [fst (name (first elm))
          idx (index-of fst "#")]
      (if (<= 0 idx)
        (subs fst (inc idx))
        nil))))

(defn apply-draw-handle [f & xs]
  (let [hf (-> (fn-meta f)
               (get :handles)
               (get :draw))]
    (if (fn? hf)
      (apply hf xs)
      (throw "Handle draw function does not exists"))))

(defn apply-drag-handle [f & xs]
  (let [hf (-> (fn-meta f)
               (get :handles)
               (get :drag))]
    (if (fn? hf)
      (apply hf xs)
      (throw "Handle on-drag function does not exists"))))

(defn tagtype [item]
  (if (zero? (count (name (first item))))
    nil
    (let [fst (name (first item))
          idx (index-of fst "#")]
      (if (zero? idx)
        nil
        (keyword (subs fst
                       0
                       (if (neg? idx)
                         (count fst)
                         idx)))))))

(defn gen-element-selector-pred [sel]
  (let [dummy-tag [(keyword (name sel))]
        tag (tagtype dummy-tag)
        id (get-id dummy-tag)]
    (cond
      (and tag id) (fn [elm] (= (first elm)))
      tag          (fn [elm] (= (tagtype elm) tag))
      id           (fn [elm] (= (get-id elm) id))
      :else        (fn [] true))))

(defn find-element [sel body]
  (first (match-elements (gen-element-selector-pred sel) body)))

(defn filter-elements [sel body]
  (let [pred (gen-element-selector-pred sel)]
    (if (sequential? body)
      (if (element? body)
        (if (<= 0 (index-of [:path :text :background] (tagtype body)))
          ;; self-closing tags
          (if (pred body) body nil)

          ;; other tags such as :g
          (if (pred body)
            ;; Returns all of body
            body

            ;; Filter children
            (let [children (slice body 2)
                  filtered-chilren (filter-elements sel children)]
              (if (nil? filtered-chilren)
                ;; None of children matches
                nil
                ;; 
                `[~@(slice body 0 2)
                  ~@filtered-chilren]))))

        ;; Not element yet still sequence
        (let [filtered-chilren
              (remove nil? (map #(filter-elements sel %) body))]
          (if (zero? (count filtered-chilren))
            nil
            filtered-chilren)))

      ;; Not a list
      nil)))

(def get-element-bounds

  (let [get-merged-path
        (fn [body]
          (if (vector? body)
            (if (keyword? (first body))
              (let [tag (tagtype body)]
                (cond

                  ;; Path
                  (= tag :path)
                  body

                  ;; Transform
                  (= tag :transform)
                  (path/transform (second body)
                                  (get-merged-path `[~@(slice body 2)]))

                  ;; Clip
                  (= tag :clip)
                  (second body)

                  ;; Artboard
                  ;; (let [bounds (second body)]
                  ;;   (rect (rect2d/point bounds) (rect2d/size bounds)))

                  ;; Style (offset stroke)
                  ;; NOTE: Path-offset looks buggy
                  ;; (and (starts-with? tagname "style")
                  ;;      (get (second body) :stroke))
                  ;; (prn-pass (path/offset-stroke 10 (get-merged-path `[~@(slice body 2)])))

                  :else
                  (get-merged-path `[~@(slice body 2)])))

              ;; Just a vector
              (->> body
                   (map get-merged-path)
                   (remove nil?)
                   (apply path/merge)))))]

    (fn [body] (path/bounds (get-merged-path body)))))



(def guide/axis
  (let [arrow (fn [from to color]
                (style (stroke color 2)
                       (def l (line from to))
                       (transform (path/align-at 1 l)
                                  (polyline [-5 -4] [0 0] [-5 4]))))]
    (fn [& xs]
      (let [[center size] (case (count xs)
                            0 [[0 0] 40]
                            1 [(first xs) 40]
                            xs)]
        (transform
         (translate center)

         (arrow [0 0] [size 0] "tomato")
         (arrow [0 0] [0 size] "limegreen")

         (guide/dotted-stroke (polyline [size 0] [size size] [0 size])))))))


(defn guide/stroke [& xs]
  (style (stroke *guide-color*)
         xs))

(defn guide/dotted-stroke [& xs]
  (style (stroke *guide-color* 1 :dash [2 2])
         xs))

(defmacro g
  {:doc "Creates a element group with attributes"
   :params [{:label "Attribute" :type "exp"}
            &
            {:label "Body" :type "exp"}]}
  [attrs & xs]
  (let [_attrs (gensym)
        _attr-transform (gensym)
        _attr-style (gensym)]
    `(let [~_attrs ~attrs
           ~_attr-transform (get ~_attrs :transform)
           ~_attr-style (get ~_attrs :style)]

       (cond
         (and ~_attr-transform ~_attr-style)
         ~`(transform ~_attr-transform ~`(style ~_attr-style ~@xs))

         ~_attr-transform
         ~`(transform ~_attr-transform ~@xs)

         ~_attr-style
         ~`(style ~_attr-style ~@xs)

         :else
         `[:g :_ ~@xs]))))

;; ==================================== JS Implementation
;; 	const matrix = evalExp(exp[1], env, cache)
;; 	const xs = exp.slice(2)

;; 	const bindingEnv = new Env()
;; 	bindingEnv.set(
;; 		S('*transform*'),
;; 		mat2d.mul(
;; 			mat2d.create(),
;; 			env.get(S('*transform*')) as mat2d,
;; 			matrix as mat2d
;; 		) as MalVal[]
;; 	)

;; 	env.pushBinding(bindingEnv)
;; 	let ret
;; 	try {
;; 		ret = [K('transform'), matrix, ...xs.map(x => evalExp(x, env, cache))]
;; 	} finally {
;; 		env.popBinding()
;; 	}
;; 	if (cache) {
;; 		;(exp as MalNode)[M_EVAL] = ret
;; 		;(exp as MalNodeSeq)[M_FN] = env.get(S_TRANSFORM) as MalFunc
;; 	}
;; 	return ret
(defmacro graphics/transform
  {:doc "Transforms elements"
   :params [{:label "Transform" :type "mat2d"}
            &
            {:label "Body" :type "exp"}]}
  [xform & body]
  (let [local-xform (eval-in-env xform)
        global-xform (mat2d/* (eval-in-env *transform*)
                              local-xform)]
    `(binding [*transform* ~local-xform]
       [:transform ~local-xform ~@body])))
(defalias transform graphics/transform)

;; ==================================== JS Implementation
; const [, _styles, ...body] = exp
;; const styles = evalExp(_styles, env, cache) as MalMap | MalMap[]
;; const mergedStyle = Array.isArray(styles)
;; 	? styles.reduce((ret, s) => {
;; 			return {...ret, ...s}
;; 		}, {})
;; 	: styles

;; const bindingEnv = new Env()

;; for (const [prop, value] of Object.entries(mergedStyle)) {
;; 	const name = S(`*${prop.slice(1)}*`)
;; 	bindingEnv.set(name, value)
;; }

;; env.pushBinding(bindingEnv)
;; let ret
;; try {
;; 	ret = [K('style'), styles, ...body.map(x => evalExp(x, env, cache))]
;; } finally {
;; 	env.popBinding()
;; }
;; if (cache) {
;; 	;(exp as MalNode)[M_EVAL] = ret
;; 	;(exp as MalNodeSeq)[M_FN] = env.get(S_STYLE) as MalFunc
;; }
;; return ret

;; ==================================== JS Implementation
(defmacro graphics/style
  {:doc "Applies a style to elements"
   :params [{:label "Style" :type "exp"}
            &
            {:label "Body" :type "exp"}]}
  [styles & body]
  (let [evaluated-styles (eval-in-env (if (vector? styles)
                                        styles
                                        [styles]))
        merged-style (merge-hash-map evaluated-styles)
        binds (apply concat
                     (map #(vector (symbol (str "*" (name (first %)) "*"))
                                   (second %))
                          (entries merged-style)))]
    `(binding ~binds [:style ~merged-style ~@body])))
(defalias style graphics/style)

;; const [, _option, ..._body] = exp
;; const option = evalExp(_option, env, cache) as MalMap
;; const bounds = option[K('bounds')]
;; const background = option[K('background')]

;; if (!Array.isArray(bounds) || bounds.length < 4) {
;; 	throw new MalError('Invalid bounds')
;; }

;; const [x, y, width, height] = bounds as number[]

;; const bindingEnv = new Env()
;; bindingEnv.set(S('*size*'), [width, height])
;; bindingEnv.set(S('*width*'), width)
;; bindingEnv.set(S('*height*'), height)
;; bindingEnv.set(S('*inside-artboard*'), true)

;; if (background) {
;; 	bindingEnv.set(S('*background*'), background)
;; }

;; env.pushBinding(bindingEnv)

;; const body = evalExp(_body, env, cache) as MalVal[]

;; let ret
;; try {
;; 	ret = evalExp(
;; 		L(
;; 			K('artboard'),
;; 			[...bounds],
;; 			L(
;; 				S('transform'),
;; 				[1, 0, 0, 1, x, y],
;; 				...(background ? [[K('background'), background, true]] : []),
;; 				...body,
;; 				L(
;; 					S('guide/stroke'),
;; 					L(S('rect'), [0.5, 0.5], [width - 1, height - 1])
;; 				)
;; 			)
;; 		),
;; 		env,
;; 		cache
;; 	)
;; } finally {
;; 	env.popBinding()
;; }

;; if (cache) {
;; 	;(exp as MalNode)[M_EVAL] = ret
;; 	;(exp as MalNodeSeq)[M_FN] = env.get(S_ARTBOARD) as MalFunc
;; 	;(exp as MalNodeSeq)[M_EVAL_PARAMS] = [option, ...body]
;; }
;; return ret
(defmacro graphics/artboard
  {:doc "Creates an artboard"
   :params [{:label "Options" :type "code"}
            &
            {:label "Body" :type "code"}]
  ;;  :handles {:draw (fn [{:params [{:bounds bounds} & body]}]
  ;;                    (let [info {:params [bounds]
  ;;                                :return (rect bounds)}]
  ;;                      (apply-draw-handle rect2d info)))
  ;;            :drag (fn [info]
  ;;                    (prn-pass (let [params (get info :params)
  ;;                                    options (first params)
  ;;                                    bounds (get options :bounds)
  ;;                                    rect-info (assoc info :params [bounds])
  ;;                                    new-bounds (first (apply-drag-handle rect2d rect-info))
  ;;                                    new-options (assoc options :bounds new-bounds)]
  ;;                                `[~new-options ~@(rest params)])))}}
   }
  [options & body]
  (let [evaluated-options (eval-in-env options)
        bounds (get evaluated-options :bounds [0 0 0 0])
        size (rect2d/size bounds)
        offset (rect2d/point bounds)
        bg (get evaluated-options :background)]
    `(binding [*size* ~size
               *width* ~(rect2d/width bounds)
               *height* ~(rect2d/height bounds)
               *inside-artboard* true
               *background* ~(or bg *background*)]
       [:clip (rect ~bounds)
        ~(if bg `(style (fill ~bg) (rect ~bounds)))
        (transform (translate ~offset)
                   ~@body
                   (guide/stroke ~(rect (rect2d/point-size [0.5 0.5]
                                                           (vec2/- size [1 1])))))])))
(defalias artboard graphics/artboard)

;; Color
(defn color? [x]
  (string? x))

(defn color/gray
  {:returns {:type "color"}}
  [v]
  (def b (* v 255))
  (format "rgb(%f,%f,%f)" b b b))

(defn validator-01 [x] (clamp x 0 1))
(defn validator-zero-twopi [x] (clamp x 0 TWO_PI))

(defn color/rgb
  {:params [{:label "Red" :type "number" :validator validator-01}
            {:label "Green" :type "number" :validator validator-01}
            {:label "Blue" :type "number" :validator validator-01}
            {:label "Alpha" :type "number" :validator validator-01 :default 1}]
   :returns {:type "color"}}
  [r g b & a]
  (if (zero? (count a))
    (format "rgb(%f,%f,%f)" (* r 255) (* g 255) (* b 255))
    (format "rgba(%f,%f,%f,%f)" (* r 255) (* g 255) (* b 255) (first a))))
(defalias rgb color/rgb)

(defn color/hsl
  {:params [{:label "Hue" :type "number" :validator validator-zero-twopi}
            {:label "Saturation" :type "number" :validator validator-01}
            {:label "Lightness" :type "number" :validator validator-01}
            {:label "Alpha" :type "number" :validator validator-01 :default 1}]
   :returns {:type "color"}}
  [h s l & a]
  (if (zero? (count a))
    (format "hsl(%f,%s,%s)"
            (mod (to-deg h) 360)
            (str (* s 100) "%")
            (str (* l 100) "%"))
    (format "hsla(%f,%s,%s,%f)"
            (mod (to-deg h) 360)
            (str (* s 100) "%")
            (str (* l 100) "%")
            (first a))))
(defalias hsl color/hsl)

(defn graphics/background
  {:doc "Fill the entire view or artboard with a color"
   :params [{:type "color" :desc "A background color"}]}
  [color]
  `[:background ~color ~*inside-artboard*])
(defalias background graphics/background)

(defn element? [a] (and (vector? a) (keyword? (first a))))

;; Transform
(defn view-center
  {:doc "Returns the center of view or artboard"
   :returns {:type "vec2"}
   :handles {:draw (fn [{:return mat}]
                     [{:type "translate" :pos (take 4 mat)}])}}
  []
  (vec2/scale *size* .5))

;; Style
(defn graphics/fill
  {:doc "Creates a fill property"
   :params [{:label "Color" :type "color" :desc "Color to fill"}]}
  [& xs]
  (if (zero? (count xs))
    {:fill true}
    {:fill true :fill-color (first xs)}))
(defalias fill graphics/fill)

(defn graphics/no-fill
  {:doc "Disables all the previous fill styles"
   :params []}
  [] {:fill false})
(defalias no-fill graphics/no-fill)

(defn graphics/stroke
  {:doc "Creates a stroke property"
   :params [{:label "Color" :type "color"}
            {:label "Width" :default 1 :type "number"
             :validator #(max 0 %)}
            &
            {:label "Options"
             :keys [{:key :cap :type "dropdown" :default "round"
                     :enum ["butt" "round" "square"]}
                    {:key :join :type "dropdown" :default "round"
                     :enum ["bevel" "round" "miter"]}]}]}
  [color & options]
  (let [params (case (count options)
                 0 {}
                 1 {:width (first options)}
                 (apply hash-map (concat :width options)))]
    (->> params
         (seq params)
         (map (fn [[k v]] [(keyword (str "stroke-" (name k))) v]))
         (apply concat [:stroke true :stroke-color color])
         (apply hash-map))))
(defalias stroke graphics/stroke)

(defn graphics/no-stroke
  {:doc "Disables all the previous stroke styles"
   :params []}
  [] {:stroke false})
(defalias no-stroke graphics/no-stroke)

; (defn linear-gradient
;   {:doc "Define a linear gradient style to apply to fill or stroke"}
;   [x1 y1 x2 y2 & xs]
;   (let [args (apply hash-map xs)]
;     (if (not (contains? args :stops))
;       (throw "[linear-gradient] odd number of arguments")
;       (vector :linear-gradient
;               (hash-map :points (vector x1 y1 x2 y2)
;                         :stops (get args :stops))))))

;; Shape Functions
(defn graphics/text
  {:doc "Generates a text shape"
   :params [{:type "string" :desc "the alphanumeric symbols to be displayed"}
            {:type "vec2"}
            &
            {:keys [{:key :size :type "number" :default 12}
                    {:key :font :type "string" :default "Fira Code"}
                    {:key :align :type "dropdown" :default "center"
                     :enum ["left" "center" "right" "start" "end"]}
                    {:key :baseline :type "dropdown" :default "middle"
                     :enum ["top" "hanging" "middle"
                            "alphabetic" "ideographic" "bottom"]}]}]
   :handles {:draw (fn [{:params [_ pos & xs]}]
                     (let [args (apply hash-map xs)
                           size (get args :size 12)]
                       [{:id :pos
                         :type "translate"
                         :pos pos}
                        {:id :size
                         :type "path"
                         :path (ngon pos size 4)}]))
             :drag (fn [{:id id :pos p :params params}]
                     (case id
                       :pos (replace-nth params 1 p)
                       :size (let [dir (vec2/- (nth params 1) p)
                                   size (+ (abs (.x dir)) (abs (.y dir)))
                                   args (->> (drop 2 params)
                                             (apply hash-map)
                                             (#(assoc % :size size))
                                             (entries)
                                             (apply concat))]
                               `[~@(take 2 params) ~@args])))}}
  [text pos & xs]
  [:text text pos (apply hash-map xs)])

(defalias text graphics/text)

(defn graphics/point-cloud
  {:doc "Creates vector of points"
   :params [&
            {:label "Point" :type "vec2"}]
   :handles {:draw (fn [{:params pts}]
                     (concat [{:id "new" :type "bg"}]
                             (map-indexed (fn [i p] {:id i :type "point" :pos p}) pts)))
             :drag (fn [{:id id :pos p
                         :params pts}]
                     (if (number? id)
                       (replace-nth pts id p)
                       (concat pts [p])))}}
  [& pts]
  (vec pts))
(defalias point-cloud graphics/point-cloud)

(defn point-cloud/scatter
  {:doc "Scatters points"
   :params [{:type "vec2"}
            {:type "number"}
            {:type "number" :validator #(round (max 0 %))}
            {:type "seed"}]
   :handles {:draw (fn [{:params [center radius]
                         :return ret}]
                     [{:type "path" :guide true
                       :path (apply concat
                                    [:path]
                                    (map #(vector :M (vec2/+ % [-2 -2]) :L (vec2/+ % [2  2])
                                                  :M (vec2/+ % [-2  2]) :L (vec2/+ % [2 -2])) ret))}
                      {:type "path" :id :radius :class "dashed" :path (circle center radius)}
                      {:type "arrow" :id :radius
                       :pos (vec2/+ center [radius 0])}
                      {:id :center
                       :type "translate"
                       :pos center}])
             :drag (fn [{:id id :pos p
                         :params [center radius n seed]}]
                     (case id
                       :center [p radius n seed]
                       :radius [center (vec2/dist center p) n seed]))}}
  [center radius n seed]
  (let [seed-offset (rnd seed)]
    (map (fn [i]
           (vec2/+
            center
            (vec2/dir (* (rnd (+ i seed-offset)) TWO_PI)
                      (* (rnd (+ i 0.5 seed-offset)) radius))))
         (range n))))
